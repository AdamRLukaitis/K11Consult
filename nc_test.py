"""Subclass of ConsultFrame, which is generated by wxFormBuilder."""

import wx
import gui
import serial
import time
import datetime
import threading
from wx.lib.pubsub import Publisher

PORT = serial.Serial('/dev/pts/7', 9600, timeout=None)

#global READ_THREAD = True

# Implementing ConsultFrame
class NissanConsultConsultFrame( gui.ConsultFrame ):
	def __init__( self, parent ):
            gui.ConsultFrame.__init__( self, parent )

            Publisher().subscribe(self.updateMPH, "mph")
            Publisher().subscribe(self.updateRPM, "rpm")
            Publisher().subscribe(self.updateTemperature, "temperature")
            Publisher().subscribe(self.updateBattery, "battery")
            Publisher().subscribe(self.updateMAF, "massAirFlow")
            Publisher().subscribe(self.updateAAC, "AACValve")
            Publisher().subscribe(self.updateInjection, "injection")
            Publisher().subscribe(self.updateTiming, "timing")
	# Handlers for ConsultFrame events.
	
	
	        # Handlers for ConsultFrame events.
        def startStream(self, event):
                
            global READ_THREAD
            
            READ_THREAD = True
            print READ_THREAD
            if PORT.isOpen == False:
                PORT.open()
                print "Port opened"
                
            TestThread()
            
            self.stopData.Enable(True)
            self.startData.Enable(False)
            
        def stopStream(self, event):
            
            #READ_THREAD = False
            #print READ_THREAD
            #TestThread().join()
            #print "TestThread joined"
            #PORT.write('\30')
            #print "Wrote \x30 to port"
            #PORT.close()
            #print "Closed port"
            READ_THREAD = False
            TestThread().join()
            
            PORT.write('\30')
            PORT.close()
            self.stopData.Enable(False)
            self.startData.Enable(True)
                
            
	
	
	def toggleButton1Method( self, event ):
            global READ_THREAD
            # Active State
            if self.toggleButton1.GetValue() == True:
                READ_THREAD = True
                if PORT.isOpen == False:
                    PORT.open()
                #print PORT.isOpen()
                #print "Starting Stream"
                TestThread()
                self.toggleButton1.SetLabel('Stop Data Stream')
                
            # Inactive State
            if self.toggleButton1.GetValue() == False:

                self.toggleButton1.SetLabel('Start Data Stream')
                READ_THREAD = False
                TestThread().join()
                #TestThread()._Thread__stop()
                PORT.write('\30')
                PORT.close()
                #print PORT.isOpen()
                print "stream stopped"
                
                #time.sleep(4)
                ##print TestThread().is_alive()
                ##threadList = []
                
                ##print threadList[threading.currentThread().getName()
                #portList = [threading.currentThread().getName()[0:]]

                #new_list = [ seq[0] for seq in portList ]

                #print portList



           #----------------------------------------------------------------------
        def updateMPH(self, msg):
            """
            Receives data from thread and updates the display
            """
            self.mphLabel.SetLabel("MPH: %d" % msg.data)
            #self.mphGauge.SetValue(msg.data)

    #----------------------------------------------------------------------
        def updateRPM(self, msg):
            """
            Receives data from thread and updates the display
            #"""
            #if msg.data > 5000:
                #self.displayLbl2.SetForegroundColour(wx.RED)
            #else:
                #self.displayLbl2.SetForegroundColour((255,0,255))

            self.rpmLabel.SetLabel("RPM: %d" % msg.data)
            #self.rpmGauge.SetValue(msg.data)


        def updateTemperature(self, msg):
            """
            Receives data from thread and updates the display
            """
            degreeSymbol = u'\N{DEGREE SIGN}'
            self.tempLabel.SetLabel("Temp: %d%sC" % (msg.data, degreeSymbol))
            #self.tempGauge.SetValue(msg.data)

        def updateBattery(self, msg):
            """
            Receives data from thread and updates the display
            """
            #vSymbol = u'\N{LATIN CAPITAL LETTER V}'
            self.batLabel.SetLabel("Battery: %0.2fV" % msg.data)
            #self.batGauge.SetValue(msg.data)

        def updateMAF(self, msg):
            """
            Receives data from thread and updates the display
            """
            #vSymbol = u'\N{LATIN CAPITAL LETTER V}'
            self.mafLabel.SetLabel("MAF: %dmV" % msg.data)
            #self.mafGauge.SetValue(msg.data)

        def updateAAC(self, msg):
            """
            Receives data from thread and updates the display
            """
            percentSymbol = u'\N{PERCENT SIGN}'
            self.aacLabel.SetLabel("AAC: %0.1f%s" % (msg.data, percentSymbol))
            #self.aacGauge.SetValue(msg.data)
            
        def updateInjection(self, msg):
            """
            Receives data from thread and updates the display
            """
            #percentSymbol = u'\N{PERCENT SIGN}'
            self.injectionLabel.SetLabel("Injection: %0.1fmS" % msg.data)
            #self.injectionGauge.SetValue(msg.data)
            
        def updateTiming(self, msg):
            """
            Receives data from thread and updates the display
            """
            degreeSymbol = u'\N{DEGREE SIGN}'
            self.timingLabel.SetLabel("Timing: %d%s TDC" % (msg.data, degreeSymbol))
            #self.timingGauge.SetValue(msg.data)
#----------------------------------------------------------------------

########################################################################
class TestThread(threading.Thread):
    """Test Worker Thread Class."""

    #----------------------------------------------------------------------
    def __init__(self):
        """Init Worker Thread Class."""
        threading.Thread.__init__(self)
        self.start()    # start the thread

    #----------------------------------------------------------------------
    def run(self):
        """Run Worker Thread."""
        # This is the code executing in the new thread.
        print "Inside thread..."
        print READ_THREAD
        try:

            PORT.write('\xFF\xFF\xEF')

        except ValueError:
            
            PORT.open()

        #time.sleep(2)

        if READ_THREAD == False:
            print "exiting thread"
            self._Thread__stop()
            
            
        PORT.write('\x5A\x0B\x5A\x01\x5A\x08\x5A\x0C\x5A\x05\x5A\x17\x5A\x15\x5A\x16\xF0')

        fileName = datetime.datetime.now().strftime("%y-%m-%d-%H-%M")

        #dataDict = {}

        dataLength = 3

        #myCounter = 0

        while READ_THREAD == True:
            print "Looping inside thread..."

            incomingData = PORT.read(dataLength)

            #self.logToFile(incomingData,fileName)

            if incomingData:

                dataList = map(ord,incomingData)

                Header = 255
                returnBytes = 8


            #endECUStream = 207

                if Header and returnBytes in dataList:
                    print dataList
                    #dataLength -=1
                    try:
                        
                        #if dataList[1] == 8:
                            
                            #print dataList[1]
                            #dataLength -=1
                            #print "dataLength decreased to %s" % dataLength
                        newDataList = [dataList[dataList.index(returnBytes)+1],
                                       dataList[dataList.index(returnBytes)+2],
                                       dataList[dataList.index(returnBytes)+3],
                                       dataList[dataList.index(returnBytes)+4],
                                       dataList[dataList.index(returnBytes)+5],
                                       dataList[dataList.index(returnBytes)+6],
                                       dataList[dataList.index(returnBytes)+7],
                                       dataList[dataList.index(returnBytes)+8]]

                        print newDataList
                        #print "inside newDataList loop"
                        #print dataLength
                        

                        wx.CallAfter(self.postTime,self.convertToMPH(int(newDataList[0])),"mph")
                        wx.CallAfter(self.postTime,self.convertToRev(int(newDataList[1])),"rpm")
                        wx.CallAfter(self.postTime,self.convertToTemp(int(newDataList[2])),"temperature")
                        wx.CallAfter(self.postTime,self.convertToBattery(float(newDataList[3])),"battery")
                        wx.CallAfter(self.postTime,self.convertToMAF(int(newDataList[4])),"massAirFlow")
                        wx.CallAfter(self.postTime,self.convertToAAC(float(newDataList[5])),"AACValve")
                        wx.CallAfter(self.postTime,self.convertToInjection(float(newDataList[5])),"injection")
                        wx.CallAfter(self.postTime,self.convertToTiming(float(newDataList[5])),"timing")
                        time.sleep(0.01)
                        #wx.Yield()                        
                        #if dataLength >= 1:
                            #dataLength -=1
                            #print "dataLength decreased to %s" % dataLength
                        if dataList[-1] != Header:
                            dataLength -= (returnBytes - 3)
                            #print "Inside Loop"
                            #dataLength = int(dataLength / 2)
                    except (ValueError, IndexError):

                        dataLength +=1
                        #print "Except Error: dataLength increased to %s" % dataLength
                        #del dataList[:]
                        #pass
                else:
                    #dataLength +=1
                    #time.sleep(0.5)
                    #print "dataLength increased to: %s" % dataLength
                    #print dataList
                    pass
                    
            else:
                dataLength = 3
        
        #self.Thread.join()
        
    def convertToMPH(self,inputData):

        return int(round ((inputData * 2.1) * 0.621371192237334))

    def convertToRev(self,inputData):

        return int(round((inputData * 12.5),2))

    def convertToTemp(self,inputData):

        return inputData - 50

    def convertToBattery(self,inputData):

        return (inputData * 80) / 1000

    def convertToMAF(self,inputData):

        return inputData * 5

    def convertToAAC(self,inputData):

        return inputData / 2
    
    def convertToInjection(self,inputData):

        return inputData / 100
    
    def convertToTiming(self,inputData):

        return 110 - inputData

    def logToFile(self,data,fileName):

        logFile = open(fileName + '.hex', 'a+')

        logFile.write(data)

    #----------------------------------------------------------------------
    def postTime(self, amt,command):

        Publisher().sendMessage(command, amt)


########################################################################

app = wx.App(False)

#create an object of CalcFrame
frame = NissanConsultConsultFrame(None)
#show the frame
frame.Show(True)
#start the applications
app.MainLoop()

